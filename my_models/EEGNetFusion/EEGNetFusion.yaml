# TUNED HPARS
# DATASET HPARS
# band-pass filtering cut-off frequencies
fmin: 0.13 # tuned
fmax: 46.0 # tuned
# tmin, tmax respect to stimulus onset that define the interval attribute of the dataset class
# trial begins (0 s), cue (2 s, 1.25 s long); each trial is 6 s long
# dataset interval starts from 2
# -->tmin tmax are referred to this start value (e.g., tmin=0.5 corresponds to 2.5 s)
tmin: 0.
tmax: 4.0 # tuned
# number of steps used when selecting adjacent channels from a seed channel (default at Cz)
n_steps_channel_selection: 2 # tuned

# TRAINING HPARS
# checkpoints to average
avg_models: 1 # tuned
number_of_epochs: 1000 # @orion_step1: --number_of_epochs~"uniform(250, 600, discrete=True)"
lr: 0.0009 # @orion_step1: --lr~"choices([0.01, 0.005, 0.001, 0.0005, 0.0001])"
batch_size_exponent: 6 # tuned

# DATA AUGMENTATION
# cutcat (disabled when min_num_segments=max_num_segments=1)
max_num_segments: 3 # tuned
cutcat: !new:speechbrain.augment.time_domain.CutCat
    min_num_segments: 2
    max_num_segments: !ref <max_num_segments>
# random amplitude gain between 0.5-1.5 uV (disabled when amp_delta=0.)
amp_delta: 0.01742 # tuned
# random shifts between -300 ms to 300 ms (disabled when shift_delta=0.)
shift_delta_: 1 # tuned
# injection of gaussian white noise
snr_white_low: 15.0 # tuned
snr_white_delta: 19.1 # tuned

# MODEL
# branch 1
cnn_temporal_kernels_b1: 4
cnn_temporal_kernelsize_b1: 16
cnn_sep_temporal_kernelsize_b1: 16
dropout_b1 : 0.
# branch 2
cnn_temporal_kernels_b2: 8
cnn_temporal_kernelsize_b2: 32
cnn_sep_temporal_kernelsize_b2: 16
dropout_b2 : 0.1
# branch 3
cnn_temporal_kernels_b3: 16
cnn_temporal_kernelsize_b3: 64
cnn_sep_temporal_kernelsize_b3: 16
dropout_b3 : 0.2
# common parameters
cnn_depth_multiplier: 2
cnn_depth_max_norm: 1
cnn_depth_pool_size: 4
cnn_sep_temporal_multiplier: 1
cnn_sep_temporal_pool_size: 8
cnn_pool_type: "avg"
dense_n_neurons: 4
dense_max_norm: 0.25
activation_type: 'elu'

##############################################################################################################
# OTHER HPARS
seed: 1234
__set_torchseed: !apply:torch.manual_seed [!ref <seed>]

# DIRECTORIES
data_folder: !PLACEHOLDER  #'/path/to/dataset'. The dataset will be automatically downloaded in this folder
cached_data_folder: !PLACEHOLDER #'path/to/pickled/dataset'
output_folder: !PLACEHOLDER #'path/to/results'

# DATASET HPARS
# Defining the MOABB dataset.
dataset: !new:moabb.datasets.BNCI2014001
save_prepared_dataset: True # set to True if you want to save the prepared dataset as a pkl file to load and use afterwards
data_iterator_name: !PLACEHOLDER
target_subject_idx: !PLACEHOLDER
target_session_idx: !PLACEHOLDER
events_to_load: null # all events will be loaded
original_sample_rate: 250 # Original sampling rate provided by dataset authors
sample_rate: 125 # Target sampling rate (Hz)
n_classes: 4
T: !apply:math.ceil
    - !ref <sample_rate> * (<tmax> - <tmin>)
C: 22
# We here specify how to perfom test:
# - If test_with: 'last' we perform test with the latest model.
# - if test_with: 'best, we perform test with the best model (according to the metric specified in test_key)
# The variable avg_models can be used to average the parameters of the last (or best) N saved models before testing.
# This can have a regularization effect. If avg_models: 1, the last (or best) model is used directly.
test_with: 'best' # 'last' or 'best'
test_key: "acc" # Possible opts: "loss", "f1", "auc", "acc"

# METRICS
f1: !name:sklearn.metrics.f1_score
    average: 'macro'
acc: !name:sklearn.metrics.balanced_accuracy_score
cm: !name:sklearn.metrics.confusion_matrix
metrics:
    f1: !ref <f1>
    acc: !ref <acc>
    cm: !ref <cm>

# TRAINING HPARS
n_train_examples: 100  # it will be replaced in the train script
# Learning rate scheduling (cyclic learning rate is used here)
max_lr: !ref <lr> # Upper bound of the cycle (max value of the lr)
base_lr: 0.00000001 # Lower bound in the cycle (min value of the lr)
step_size_multiplier: 5 #from 2 to 8
step_size: !apply:round
    - !ref <step_size_multiplier> * <n_train_examples> / <batch_size>
lr_annealing: !new:speechbrain.nnet.schedulers.CyclicLRScheduler
    base_lr: !ref <base_lr>
    max_lr: !ref <max_lr>
    step_size: !ref <step_size>
label_smoothing: 0.0
loss: !name:speechbrain.nnet.losses.nll_loss
    label_smoothing: !ref <label_smoothing>
optimizer: !name:torch.optim.AdamW
    lr: !ref <lr>
epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter  # epoch counter
    limit: !ref <number_of_epochs>
batch_size: !ref 2 ** <batch_size_exponent>
valid_ratio: 0.2

# DATA AUGMENTATION
rand_amp: !new:speechbrain.augment.time_domain.RandAmp
    amp_low: !ref 1 - <amp_delta>
    amp_high: !ref 1 + <amp_delta>
shift_delta: !ref 1e-2 * <shift_delta_> # 0.250 # 0.-0.25 with steps of 0.01
min_shift: !apply:math.floor
    - !ref 0 - <sample_rate> * <shift_delta>
max_shift: !apply:math.floor
    - !ref 0 + <sample_rate> * <shift_delta>
time_shift: !new:speechbrain.augment.freq_domain.RandomShift
    min_shift: !ref <min_shift>
    max_shift: !ref <max_shift>
    dim: 1
snr_white_high: !ref <snr_white_low> + <snr_white_delta>
add_noise_white: !new:speechbrain.augment.time_domain.AddNoise
    snr_low: !ref <snr_white_low>
    snr_high: !ref <snr_white_high>

# pipeline
repeat_augment: 1
augment: !new:speechbrain.augment.augmenter.Augmenter
    parallel_augment: True
    concat_original: True
    parallel_augment_fixed_bs: True
    repeat_augment: !ref <repeat_augment>
    shuffle_augmentations: True
    min_augmentations: 4
    max_augmentations: 4
    augmentations: [
        !ref <cutcat>,
        !ref <rand_amp>,
        !ref <time_shift>,
        !ref <add_noise_white>]

# DATA NORMALIZATION
dims_to_normalize: 1 # 1 (time) or 2 (EEG channels)
normalize: !name:speechbrain.processing.signal_processing.mean_std_norm
    dims: !ref <dims_to_normalize>

# MODEL
input_shape: [null, !ref <T>, !ref <C>, null]

model: !new:models.MyModel.EEGNetFusion
    input_shape: !ref <input_shape>
    # branch 1
    cnn_temporal_kernels_b1: !ref <cnn_temporal_kernels_b1>
    cnn_temporal_kernelsize_b1: [!ref <cnn_temporal_kernelsize_b1>, 1]
    cnn_sep_temporal_kernelsize_b1: [!ref <cnn_sep_temporal_kernelsize_b1>, 1]
    dropout_b1: !ref <dropout_b1>
    # branch 2
    cnn_temporal_kernels_b2: !ref <cnn_temporal_kernels_b2>
    cnn_temporal_kernelsize_b2: [!ref <cnn_temporal_kernelsize_b2>, 1]
    cnn_sep_temporal_kernelsize_b2: [!ref <cnn_sep_temporal_kernelsize_b2>, 1]
    dropout_b2: !ref <dropout_b2>
    # branch 3
    cnn_temporal_kernels_b3: !ref <cnn_temporal_kernels_b3>
    cnn_temporal_kernelsize_b3: [!ref <cnn_temporal_kernelsize_b3>, 1]
    cnn_sep_temporal_kernelsize_b3: [!ref <cnn_sep_temporal_kernelsize_b3>, 1]
    dropout_b3: !ref <dropout_b3>
    # common parameters
    cnn_depth_multiplier: !ref <cnn_depth_multiplier>
    cnn_depth_max_norm: !ref <cnn_depth_max_norm>
    cnn_depth_pool_size: [!ref <cnn_depth_pool_size>, 1]
    cnn_sep_temporal_multiplier: !ref <cnn_sep_temporal_multiplier>
    cnn_sep_temporal_pool_size: [!ref <cnn_sep_temporal_pool_size>, 1]
    cnn_pool_type: !ref <cnn_pool_type>
    dense_n_neurons: !ref <dense_n_neurons>
    dense_max_norm: !ref <dense_max_norm>
    activation_type: !ref <activation_type>